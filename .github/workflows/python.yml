# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      setup_script:
        required: true
      run_script:
        required: true
      resumeUrl:
        description: 'URL of the resume to process'
        required: true
        type: string

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y babeltrace2
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Set start timestamp
      id: start
      run: |
        echo "timestamp=$EPOCHSECONDS" >> "$GITHUB_OUTPUT"
    - name: Test
      id: test
      if: ${{ github.event_name == 'workflow_dispatch' }}
      continue-on-error: true
      run: |
        set +e  # Don't exit on errors
        
        # Initialize separate log files
        touch stdout.log stderr.log status.log
        
        # Function to log status with timestamp
        log_status() {
          echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a status.log
        }
        
        log_status "Starting test execution"
        
        # Create scripts with proper escaping
        if cat << 'SETUP_EOF' > setup.sh; then
        ${{ github.event.inputs.setup_script }}
        SETUP_EOF
          log_status "Created setup.sh successfully"
        else
          log_status "Failed to create setup.sh"
        fi
        
        if cat << 'RUN_EOF' > run.sh; then
        ${{ github.event.inputs.run_script }}
        RUN_EOF
          log_status "Created run.sh successfully"
        else
          log_status "Failed to create run.sh"
        fi
        
        # Make scripts executable
        if chmod +x setup.sh; then
          log_status "Made setup.sh executable"
        else
          log_status "Failed to make setup.sh executable"
        fi
        
        if chmod +x run.sh; then
          log_status "Made run.sh executable"
        else
          log_status "Failed to make run.sh executable"
        fi
        
        # Run setup script with separate stdout/stderr capture
        log_status "Running setup script"
        if [ -x setup.sh ]; then
          ./setup.sh >>stdout.log 2>>stderr.log
          setup_exit=$?
          if [ $setup_exit -eq 0 ]; then
            log_status "Setup script completed successfully (exit code: $setup_exit)"
          else
            log_status "Setup script failed with exit code: $setup_exit"
          fi
        else
          log_status "Setup script not executable or missing"
          echo "Setup script not executable or missing" >> stderr.log
        fi
        
        # Run the main script with separate stdout/stderr capture
        log_status "Running main script"
        if [ -x run.sh ]; then
          ./run.sh >>stdout.log 2>>stderr.log
          run_exit=$?
          if [ $run_exit -eq 0 ]; then
            log_status "Run script completed successfully (exit code: $run_exit)"
          else
            log_status "Run script failed with exit code: $run_exit"
          fi
        else
          log_status "Run script not executable or missing"
          echo "Run script not executable or missing" >> stderr.log
        fi
        
        log_status "Test execution completed"

        sed -i "s/\`/'/g" stdout.log
        sed -i "s/\`/'/g" stderr.log
        sed -i "s/\`/'/g" status.log
        
        # Capture last 20 lines of each output
        stdout_content=$(tail -n 20 stdout.log 2>/dev/null || echo "No stdout captured")
        stderr_content=$(tail -n 20 stderr.log 2>/dev/null || echo "No stderr captured")
        status_content=$(tail -n 20 status.log 2>/dev/null || echo "No status captured")
        
        # Write separate outputs to GitHub
        echo "stdout<<EOF" >> "$GITHUB_OUTPUT"
        echo "$stdout_content" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
        
        echo "stderr<<EOF" >> "$GITHUB_OUTPUT"
        echo "$stderr_content" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
        
        echo "status<<EOF" >> "$GITHUB_OUTPUT"
        echo "$status_content" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
        
        # Always exit successfully
        exit 0
    - name: Calculate duration
      id: duration
      env:
        start: ${{ steps.start.outputs.timestamp }}
      run: |
        duration=$((EPOCHSECONDS - start))
        echo "duration<<EOF" >> "$GITHUB_OUTPUT"
        echo "$duration" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
    - name: Resume N8N
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "Processing resume from: ${{ github.event.inputs.resumeUrl }}"
        cat > payload.json << 'EOF' \
        { \
          "workflow_run_id": "${{ github.run_id }}", \
          "conclusion": "${{ job.status }}", \
          "stdout": "${{ steps.test.outputs.stdout }}", \
          "stderr": "${{ steps.test.outputs.stderr }}", \
          "status": "${{ steps.test.outputs.status }}", \
          "duration": "${{ steps.duration.outputs.duration }}" \
        } \
        EOF
        curl -X POST ${{ github.event.inputs.resumeUrl }} \
          -H "Content-Type: application/json" \
          -d @payload.json

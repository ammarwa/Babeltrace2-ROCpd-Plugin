# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      setup_script:
        required: true
      run_script:
        required: true
      resumeUrl:
        description: 'URL of the resume to process'
        required: true
        type: string

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y babeltrace2
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        set +e  # Don't exit on errors
    
        # Initialize output log
        touch output.log
        
        # Create scripts with proper escaping
        cat << 'SETUP_EOF' > setup.sh || echo "Failed to create setup.sh" | tee -a output.log
        ${{ github.event.inputs.setup_script }}
        SETUP_EOF
        
        cat << 'RUN_EOF' > run.sh || echo "Failed to create run.sh" | tee -a output.log
        ${{ github.event.inputs.run_script }}
        RUN_EOF
        
        # Make scripts executable
        chmod +x setup.sh || echo "Failed to make setup.sh executable" | tee -a output.log
        chmod +x run.sh || echo "Failed to make run.sh executable" | tee -a output.log
        
        # Run setup script and capture output (always continue)
        echo "=== Running setup script ===" | tee -a output.log
        if [ -x setup.sh ]; then
          ./setup.sh 2>&1 | tee -a output.log || echo "Setup script failed but continuing..." | tee -a output.log
        else
          echo "Setup script not executable or missing" | tee -a output.log
        fi
        
        # Run the main script and append to output (always continue)
        echo "=== Running main script ===" | tee -a output.log
        if [ -x run.sh ]; then
          ./run.sh 2>&1 | tee -a output.log || echo "Run script failed but continuing..." | tee -a output.log
        else
          echo "Run script not executable or missing" | tee -a output.log
        fi
        
        # Always capture output, even if file is empty or commands failed
        echo "=== Capturing final output ===" | tee -a output.log
        
        # Get last 10 lines and properly format for GitHub output
        content=$(tail -n 10 output.log 2>/dev/null || echo "No output captured")
        
        # Always write to GitHub output, even if content is empty
        echo "message<<EOF" >> "$GITHUB_OUTPUT"
        echo "$content" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
        
        # Always exit successfully so step is marked as passed
        exit 0
    - name: Resume N8N
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "Processing resume from: ${{ github.event.inputs.resumeUrl }}"
        curl -X POST ${{ github.event.inputs.resumeUrl }} \
          -H "Content-Type: application/json" \
          -d '{
            "status": "success",
            "workflow_run_id": "${{ github.run_id }}",
            "conclusion": "${{ job.status }}",
            "output": "${{ steps.Test.outputs.message }}"
          }'

# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      setup_script:
        required: true
      run_script:
        required: true
      resumeUrl:
        description: 'URL of the resume to process'
        required: true
        type: string

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y babeltrace2
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "${{ github.event.inputs.setup_script }}" > setup.sh
        echo "${{ github.event.inputs.run_script }}" > run.sh
        chmod +x setup.sh
        chmod +x run.sh
        ./setup.sh 2>&1 | tee output.log
        ./run.sh 2>&1 | tee -a output.log
        echo "Processing resume from: ${{ github.event.inputs.resumeUrl }}"
        curl -X POST ${{ github.event.inputs.resumeUrl }} \
          -H "Content-Type: application/json" \
          -d '{
            "status": "success",
            "workflow_run_id": "${{ github.run_id }}",
            "conclusion": "${{ job.status }}",
            "output": "`cat output.log`"
          }'
